//方法1----求长度相比较，长的先走差值步 找到第一个结点相同就停下来
/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* FindFirstCommonNode( ListNode* pHead1, ListNode* pHead2) {
        if(NULL == pHead1 || NULL == pHead2)
            return NULL;
        
        ListNode* p1 = pHead1;
        ListNode* p2 = pHead2;
        int len1 = 0;
        int len2 = 0;
        while(p1)
        {
            len1++;
            p1 = p1->next;
        }
        while(p2)
        {
            len2++;
            p2 = p2->next;
        }
        p1 = pHead1;
        p2 = pHead2;
        int k = 0;
        if(len1 >= len2)
        {
            k = len1-len2;
            while(p1 && p2)
            {
                if(p1 == p2)
                    return p1;
                p1 = p1->next;
                if((--k)<0)
                    p2 = p2->next;
            }
            return NULL;
        }
        else
        {
            k = len2-len1;
            while(p1 && p2)
            {
                if(p1 == p2)
                    return p1;
                p2 = p2->next;
                if((--k)<0)
                    p2 = p1->next;
            }
            return NULL;
        }
    }
};

//方法2---使用map来解决，以结点地址作为关键码（为了防止同一个链表中有重复的元素）
/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* FindFirstCommonNode( ListNode* pHead1, ListNode* pHead2) {
        if(NULL == pHead1 || NULL == pHead2)
            return NULL;
        map<ListNode*,int> CountMap;
        ListNode* p1 = pHead1;
        ListNode* p2 = pHead2;
        while(p1 && p2)
        {
            CountMap[p1]++;
            if(CountMap[p1] >1)
                return p1;
            CountMap[p2]++;
            if(CountMap[p2] >1)
                return p2;
            p1 = p1->next;
            p2 = p2->next;
        }
        while(p1)
        {
            CountMap[p1]++;
            if(CountMap[p1] >1)
                return p1;
            p1 = p1->next;
        }
        
        while(p2)
        {
            CountMap[p2]++;
            if(CountMap[p2] >1)
                return p2;
            p2 = p2->next;
        }
        return NULL;
    }
};
